using System;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;

class Program
{
    static void Main()
    {
        string fileName = "Kundan_Kumar_Resume.pdf";
        string path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, fileName);

        using (FileStream fs = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None))
        {
            Document doc = new Document(PageSize.A4, 50f, 50f, 50f, 50f);
            PdfWriter.GetInstance(doc, fs);
            doc.Open();

            // === Fonts ===
            var headingFont = FontFactory.GetFont("Times-Roman", 13f, Font.BOLD);
            var nameFont = FontFactory.GetFont("Times-Roman", 20f, Font.BOLD);
            var roleFont = FontFactory.GetFont("Times-Roman", 12f, Font.ITALIC);
            var contactFont = FontFactory.GetFont("Times-Roman", 11f);
            var contentFont = FontFactory.GetFont("Times-Roman", 11f);
            var lineGap = 6f;

            // === Header ===
            AddCenteredParagraph(doc, "KUNDAN KUMAR", nameFont, spacingAfter: 2f);
            AddCenteredParagraph(doc, "Dotnet Developer", roleFont, spacingAfter: 2f);
            AddCenteredParagraph(doc, "Phone: +91 9798501225 | Email: kundanmth01@gmail.com", contactFont, spacingAfter: 12f);

            // === Professional Summary ===
            AddSection(doc, "Professional Summary", headingFont,
                "Motivated and quick-learning IT professional with strong interpersonal skills and a proven ability to develop robust software solutions. Experienced in full-stack .NET development, API integration, and database management. Seeking to contribute my expertise to dynamic software development teams in enterprise environments.",
                contentFont, lineGap);

            // === Technical Skills ===
            AddSection(doc, "Technical Skills", headingFont,
                "• C#, .NET, .NET Core, ASP.NET MVC\n" +
                "• Web API, JavaScript, jQuery, HTML, CSS, Bootstrap\n" +
                "• SQL Server, LINQ\n" +
                "• Tools: Visual Studio, Git, Postman\n" +
                "• Platforms: Windows, IIS",
                contentFont, lineGap);

            // === Experience ===
            AddSection(doc, "Professional Experience", headingFont,
                "MNB Soft Solution — Jan 2024 – Present\n" +
                "• Developed REST APIs using .NET Core and C#.\n" +
                "• Integrated payment gateways like CCAvenue and CoinsPay.\n" +
                "• Worked with SQL Server and optimized DB queries.\n\n" +
                "WTS Net India Pvt. Ltd. — Jan 2023 – Jan 2024\n" +
                "• Designed and developed MVC applications.\n" +
                "• Improved app performance and collaborated with dev teams.",
                contentFont, lineGap);

            // === Education ===
            AddSection(doc, "Education", headingFont,
                "• MCA – Indira Gandhi National Open University\n" +
                "• BCA – Indira Gandhi National Open University (2020)",
                contentFont, lineGap);

            // === Projects ===
            AddSection(doc, "Projects", headingFont,
                "• Mparchi – https://mparchi.com\n" +
                "• NvShoppe – https://nvshoppe.com\n" +
                "• MnbPromo – https://mnbpromo.com\n" +
                "• MLM Software Solutions",
                contentFont, lineGap);

            // === Languages ===
            AddSection(doc, "Languages", headingFont,
                "• English – Professional Proficiency\n" +
                "• Hindi – Native Proficiency",
                contentFont, lineGap);

            doc.Close();
        }

        Console.WriteLine("✅ Resume PDF Generated Successfully at: " + path);

        // Auto open the file
        System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
        {
            FileName = path,
            UseShellExecute = true
        });
    }

    // Utility: Centered Paragraph
    static void AddCenteredParagraph(Document doc, string text, Font font, float spacingAfter = 5f)
    {
        Paragraph p = new Paragraph(text, font)
        {
            Alignment = Element.ALIGN_CENTER,
            SpacingAfter = spacingAfter
        };
        doc.Add(p);
    }

    // Utility: Section with title and content
    static void AddSection(Document doc, string title, Font titleFont, string content, Font contentFont, float spacing)
    {
        Paragraph titlePara = new Paragraph(title, titleFont)
        {
            SpacingBefore = 10f,
            SpacingAfter = 4f
        };
        doc.Add(titlePara);

        Paragraph contentPara = new Paragraph(content, contentFont)
        {
            SpacingAfter = spacing
        };
        doc.Add(contentPara);
    }
}
